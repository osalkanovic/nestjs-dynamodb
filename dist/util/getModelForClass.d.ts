import { DynamoDB } from 'aws-sdk';
import { DataMapper, CreateTableOptions } from '@aws/dynamodb-data-mapper';
import { DynamoDBClass } from '../module/dynamodb.interfaces';
declare type instanceOfDynamoDBClass = InstanceType<DynamoDBClass>;
export declare class GetModelForClass<T extends instanceOfDynamoDBClass> {
    constructor(dynamoDBClass: DynamoDBClass, tableOptions: CreateTableOptions, dynamoDBClient: DynamoDB, mapper: DataMapper);
    private dynamoDBClass;
    private table;
    private dynamoDBClient;
    private mapper;
    private schema;
    private hashKey;
    private rangeKey;
    getDynamoDBClient(): DynamoDB;
    getSchema(): any;
    getTable(): string;
    getValueType(value: any): string;
    create(input: Partial<T>): Promise<T>;
    find(input?: Partial<DynamoDBClass>, options?: any): Promise<T[]>;
    generateCondition(key: any, value: any): string;
    clearValue(value: any): any;
    generateValue(value: any, attr: any): any;
    findById(id: string): Promise<T>;
    checkCondition(value: any): "AND" | "OR";
    findByIdAndDelete(id: string): Promise<DynamoDB.DeleteItemOutput>;
    findByIdAndUpdate(id: string, update: Partial<DynamoDBClass>): Promise<T>;
    private getDeleteItemInput;
    private getFindItemInput;
}
export declare const getModelForClass: <T extends unknown>(dynamoDBClass: DynamoDBClass, tableOptions: CreateTableOptions, dynamoDBClient: DynamoDB, mapper: DataMapper) => GetModelForClass<T>;
export {};
